name: test
on:
  repository_dispatch:
    types: [test-command]

defaults:
  run:
    # We need -e -o pipefail for consistency with GitHub Actions's default behavior
    shell: bash -e -o pipefail {0}

jobs:
  example:
    runs-on: ubuntu-latest
    steps:
      # Update GitHub status for dispatch events
      - name: "Update GitHub Status for pending"
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_STATE: pending
          GITHUB_CONTEXT: "test/example"
          GITHUB_DESCRIPTION: "tests started by @${{ github.event.client_payload.github.actor }}"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

      # Checkout the code from GitHub Pull Request
      - name: "Checkout code for ChatOps"
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}

      - name: "Echo something"
        run: |
          echo "Hello world!"

      - name: "Fail"
        run: |
          exit 1

      - name: "Wait"
        run: |
          sleep 600

      # Update GitHub status for dispatch events
      - name: "Update GitHub Status for failure"
        if: ${{ failure() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_STATE: failure
          GITHUB_CONTEXT: "test/example"
          GITHUB_DESCRIPTION: "tests failed"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

      # Update GitHub status for dispatch events
      - name: "Update GitHub Status for success"
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_STATE: success
          GITHUB_CONTEXT: "test/example"
          GITHUB_DESCRIPTION: "tests passed"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

      # Update GitHub status for dispatch events
      - name: "Update GitHub Status for cancelled"
        if: ${{ cancelled() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GITHUB_STATE: error
          GITHUB_CONTEXT: "test/example"
          GITHUB_DESCRIPTION: "tests cancelled"
          GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }}
          GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

      # Add reaction when finished
      - name: "Add reaction"
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray
